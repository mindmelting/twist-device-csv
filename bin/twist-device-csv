#!/usr/bin/env node

'use strict';

process.title = 'twist-device-csv';

var path = require('path'),
    config = require(path.join(process.cwd(), 'config')),
    fs = require('fs'),
    glob = require('glob'),
    readline = require('readline'),
    colors = require('colors'),
    csv = require('csv');

var rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
});

function addDevice() {
    var fields = [],
        currentIndex = 0,
        callback = function(answer) {
            fields.push(answer);
            currentIndex++;
            if (currentIndex < config.fields.length) {
                queryUserForField(config.fields[currentIndex], callback);
            } else {
                addDeviceToCsv(fields);
            }
        };

    queryUserForField(config.fields[currentIndex], callback);
}

function queryUserForField(field, cb) {
    rl.question('Add field - ' + field.bold + ' :', function(answer) {
        cb(answer);
    });
}

function removeDevice() {
    var parsedCsv;

    fs.readFile(config.referenceFile, function(err, data) {
        if (err && err.code == 'ENOENT') {
            console.log('Reference file does not exist'.red.bold);
            process.kill(1);
        } else if (!err) {
            csv.parse(data, {columns: true}, function(err, output) {
                if (err) {
                    console.log('Error occured parsing reference file'.red.bold);
                    console.log(err);
                    process.kill(1);
                } else {
                    parsedCsv = output;
                    console.log('Choose a device to remove, e.g. 0');
                    outputDevices(parsedCsv);
                }
            });
        } else {
            console.log('Error occured whilst opening reference file'.red.bold);
            console.log(err);
            process.kill(1);
        }
    });
    rl.on('line', function(input) {
        if (isNaN(input) || parsedCsv.length < parseInt(input, 10)) {
            console.log('Input has to be a number'.red.bold);
        } else {
            parsedCsv.splice(parseInt(input, 10), 1);
            csv.stringify(parsedCsv, {header: true}, function(err, output) {
                if (err) {
                    console.log('Error occured'.red.bold);
                    console.log(err);
                } else {
                    fs.writeFile(config.referenceFile, output, function(err) {
                        if (err) {
                            console.log('There was an error creating the reference file'.red.bold);
                            console.log(err);
                            process.kill(1);
                        } else {
                            console.log('Removed device'.green.bold);
                            process.kill(0);
                        }
                    });
                }
            });
        } 
    });
}

function outputDevices(devices) {
    devices.forEach(function(device, index) {
        console.log(index + ' - ' + device.deviceName);
    });
}
    
function sanitiseDevices(filePath) {
    var test = path.join(process.cwd(), filePath, '*.scn.csv');
    console.log(test);
    glob(path.join(process.cwd(), filePath, '*.scn.csv'), function(err, files) {
        if (err) {
            console.log('Error reading files'.red.bold);
            console.log(err);
        } else {
            var stream = fs.createReadStream(config.referenceFile);
            stream.setMaxListeners(1000);
            files.forEach(function(fileName) {
                stream.pipe(fs.createWriteStream(fileName));
            });
            stream.on('end', function() {
                console.log('Copied devices to scenario CSVs'.green.bold);
                process.kill(0); 
            });
        }
    });
}

function verifyReferenceFile(cb) {
    fs.open(config.referenceFile, 'r', function(err, fd) {
        if (err && err.code == 'ENOENT') {
            console.log('Reference file does not exist'.red.bold);
            createReferenceFile(cb);
        } else if (!err) {
            fs.close(fd);
            cb();
        } else {
            console.log('Error occured whilst opening reference file'.red.bold);
            console.log(err);
        }
    });
}

function createReferenceFile(cb, fields) {
    console.log('Creating reference file'.green);
    csv.stringify(fields || [config.fields], function(err, output) {
        if (err) {
            console.log('There was an error creating the reference file'.red.bold);
            console.log(err);
            process.kill(1);
        } else {
            fs.writeFile(config.referenceFile, output, function(err) {
                if (err) {
                    console.log('There was an error creating the reference file'.red.bold);
                    console.log(err);
                    process.kill(1);
                } else {
                    console.log('Created reference file'.green.bold);
                    cb();
                }
            });
        }
    });
}

function addDeviceToCsv(deviceFields) {
    csv.stringify([deviceFields], function(err, output) {
         if (err) {
             console.log('There was an error appending the reference file'.red.bold);
             console.log(err);
         } else {
             fs.appendFile(config.referenceFile, output, function(err) {
                 if (err) {
                     console.log('There was an error appending the reference file'.red.bold);
                     console.log(err);
                     process.kill(1);
                 } else {
                     console.log('Appended reference file with device'.green.bold);
                     rl.close();
                 }
             });
         }
    });
}

function checkArguments() {
    if (process.argv.length < 3) {
        displayHelp();
    } else {
        verifyReferenceFile(function() {
            switch(process.argv[2]) {
                case 'add':
                    addDevice();
                    break;
                case 'remove':
                    removeDevice();
                    break;
                case 'sanitise':
                    sanitiseDevices(process.argv[3]);
                    break;
                default:
                    displayHelp();
            }
        });
    }
}

function displayHelp() {
    console.log('Commands available');
    console.log('-------------------'.rainbow.bold);
    console.log('add'.bold + ' - Add a new device to existing CSV files');
    console.log('remove'.bold + ' - Remove a device to existing CSV files');
    console.log('sanitise'.bold + ' PATH - Sanitise twist csv files in PATH with existing reference devices');
    process.exit(1);
}

process.stdin.setMaxListeners(0);
checkArguments();
